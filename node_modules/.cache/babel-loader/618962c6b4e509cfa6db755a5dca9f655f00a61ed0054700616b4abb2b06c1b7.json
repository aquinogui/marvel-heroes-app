{"ast":null,"code":"import axios from 'axios';\nimport md5 from 'crypto-js/md5';\n\n// Substitua com suas próprias chaves da API da Marvel\nconst PUBLIC_KEY = '9ae95487bd582c32f6c335b8e7330abc';\nconst PRIVATE_KEY = 'b8a3dfb8cbd9b83d762173ebb6204d8a2c558509';\nconst BASE_URL = 'https://gateway.marvel.com:443/v1/public';\nconst TIMESTAMP = new Date().getTime();\nconst HASH = md5(TIMESTAMP + PRIVATE_KEY + PUBLIC_KEY).toString(); // Função para gerar o hash MD5\n\nexport const fetchCharacters = async () => {\n  try {\n    const response = await axios.get(`${BASE_URL}/characters`, {\n      params: {\n        apikey: PUBLIC_KEY,\n        ts: TIMESTAMP,\n        hash: HASH\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Erro ao buscar personagens:', error);\n    throw error;\n  }\n};\nexport const fetchHeroById = async characterId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/characters/${characterId}`, {\n      params: {\n        apikey: PUBLIC_KEY,\n        ts: TIMESTAMP,\n        hash: HASH\n      }\n    });\n    return response.data.data.results[0];\n  } catch (error) {\n    console.error('Erro ao buscar detalhes do personagem:', error);\n    throw error;\n  }\n};\nexport const fetchComicsByCharacter = async characterId => {\n  try {\n    const response = await axios.get(`${BASE_URL}/characters/${characterId}/comics`, {\n      params: {\n        apikey: PUBLIC_KEY,\n        ts: TIMESTAMP,\n        hash: HASH\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Erro ao buscar quadrinhos do personagem:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","md5","PUBLIC_KEY","PRIVATE_KEY","BASE_URL","TIMESTAMP","Date","getTime","HASH","toString","fetchCharacters","response","get","params","apikey","ts","hash","data","results","error","console","fetchHeroById","characterId","fetchComicsByCharacter"],"sources":["C:/Users/User/Desktop/estudos-js/marvel-heroes/marvel-heroes-app/marvel-heroes-app/src/services/marvelService.js"],"sourcesContent":["import axios from 'axios';\r\nimport md5 from 'crypto-js/md5';\r\n\r\n// Substitua com suas próprias chaves da API da Marvel\r\nconst PUBLIC_KEY = '9ae95487bd582c32f6c335b8e7330abc';\r\nconst PRIVATE_KEY = 'b8a3dfb8cbd9b83d762173ebb6204d8a2c558509';\r\n\r\nconst BASE_URL = 'https://gateway.marvel.com:443/v1/public';\r\nconst TIMESTAMP = new Date().getTime();\r\nconst HASH = md5(TIMESTAMP + PRIVATE_KEY + PUBLIC_KEY).toString(); // Função para gerar o hash MD5\r\n\r\nexport const fetchCharacters = async () => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/characters`, {\r\n      params: {\r\n        apikey: PUBLIC_KEY,\r\n        ts: TIMESTAMP,\r\n        hash: HASH,\r\n      }\r\n    });\r\n    return response.data.data.results;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar personagens:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchHeroById = async (characterId) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/characters/${characterId}`, {\r\n      params: {\r\n        apikey: PUBLIC_KEY,\r\n        ts: TIMESTAMP,\r\n        hash: HASH,\r\n      }\r\n    });\r\n    return response.data.data.results[0];\r\n  } catch (error) {\r\n    console.error('Erro ao buscar detalhes do personagem:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchComicsByCharacter = async (characterId) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/characters/${characterId}/comics`, {\r\n      params: {\r\n        apikey: PUBLIC_KEY,\r\n        ts: TIMESTAMP,\r\n        hash: HASH,\r\n      }\r\n    });\r\n    return response.data.data.results;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar quadrinhos do personagem:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,eAAe;;AAE/B;AACA,MAAMC,UAAU,GAAG,kCAAkC;AACrD,MAAMC,WAAW,GAAG,0CAA0C;AAE9D,MAAMC,QAAQ,GAAG,0CAA0C;AAC3D,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AACtC,MAAMC,IAAI,GAAGP,GAAG,CAACI,SAAS,GAAGF,WAAW,GAAGD,UAAU,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEnE,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGR,QAAQ,aAAa,EAAE;MACzDS,MAAM,EAAE;QACNC,MAAM,EAAEZ,UAAU;QAClBa,EAAE,EAAEV,SAAS;QACbW,IAAI,EAAER;MACR;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,OAAO;EACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGR,QAAQ,eAAekB,WAAW,EAAE,EAAE;MACxET,MAAM,EAAE;QACNC,MAAM,EAAEZ,UAAU;QAClBa,EAAE,EAAEV,SAAS;QACbW,IAAI,EAAER;MACR;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,sBAAsB,GAAG,MAAOD,WAAW,IAAK;EAC3D,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,GAAGR,QAAQ,eAAekB,WAAW,SAAS,EAAE;MAC/ET,MAAM,EAAE;QACNC,MAAM,EAAEZ,UAAU;QAClBa,EAAE,EAAEV,SAAS;QACbW,IAAI,EAAER;MACR;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACC,OAAO;EACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}