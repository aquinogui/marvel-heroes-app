{"ast":null,"code":"// src/services/marvelService.js\nimport md5 from 'md5';\n// src/services/marvelService.js\nimport axios from 'axios';\nconst BASE_URL = 'https://gateway.marvel.com/v1/public';\nconst API_KEY = 'YOUR_API_KEY_HERE'; // Substitua pela sua chave API\n\nexport const fetchHeroById = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/characters/${id}?apikey=${API_KEY}`);\n    return response.data.data.results[0];\n  } catch (error) {\n    console.error('Erro ao buscar o herói:', error);\n    throw error;\n  }\n};\nconst publicKey = process.env.REACT_APP_MARVEL_PUBLIC_KEY;\nconst privateKey = process.env.REACT_APP_MARVEL_PRIVATE_KEY;\nconst baseURL = 'https://gateway.marvel.com/v1/public';\nconst fetchCharacters = async () => {\n  const timestamp = new Date().getTime();\n  const hash = md5(`${timestamp}${privateKey}${publicKey}`);\n  const url = `${baseURL}/characters?limit=20&ts=${timestamp}&apikey=${publicKey}&hash=${hash}`;\n  try {\n    console.log('Fetching URL:', url);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch characters');\n    }\n    const data = await response.json();\n    console.log('Fetched Data:', data);\n    return data.data.results;\n  } catch (error) {\n    console.error('Error fetching characters:', error);\n    return [];\n  }\n};\n\n// marvelService.js\nexport const fetchCharacterById = async id => {\n  const response = await fetch(`https://gateway.marvel.com/v1/public/characters/${id}?apikey=YOUR_API_KEY`);\n  const data = await response.json();\n  return data.data.results[0];\n};\nexport const fetchComicsByHeroId = async id => {\n  const response = await fetch(`https://gateway.marvel.com/v1/public/characters/${id}/comics?apikey=YOUR_API_KEY`);\n  const data = await response.json();\n  return data.data.results;\n};\nexport { fetchCharacters };","map":{"version":3,"names":["md5","axios","BASE_URL","API_KEY","fetchHeroById","id","response","get","data","results","error","console","publicKey","process","env","REACT_APP_MARVEL_PUBLIC_KEY","privateKey","REACT_APP_MARVEL_PRIVATE_KEY","baseURL","fetchCharacters","timestamp","Date","getTime","hash","url","log","fetch","ok","Error","json","fetchCharacterById","fetchComicsByHeroId"],"sources":["C:/Users/User/Desktop/estudos-js/marvel-heroes/marvel-heroes-app/src/services/marvelService.js"],"sourcesContent":["// src/services/marvelService.js\r\nimport md5 from 'md5';\r\n// src/services/marvelService.js\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'https://gateway.marvel.com/v1/public';\r\nconst API_KEY = 'YOUR_API_KEY_HERE'; // Substitua pela sua chave API\r\n\r\nexport const fetchHeroById = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/characters/${id}?apikey=${API_KEY}`);\r\n    return response.data.data.results[0];\r\n  } catch (error) {\r\n    console.error('Erro ao buscar o herói:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nconst publicKey = process.env.REACT_APP_MARVEL_PUBLIC_KEY;\r\nconst privateKey = process.env.REACT_APP_MARVEL_PRIVATE_KEY;\r\nconst baseURL = 'https://gateway.marvel.com/v1/public';\r\n\r\nconst fetchCharacters = async () => {\r\n  const timestamp = new Date().getTime();\r\n  const hash = md5(`${timestamp}${privateKey}${publicKey}`);\r\n  const url = `${baseURL}/characters?limit=20&ts=${timestamp}&apikey=${publicKey}&hash=${hash}`;\r\n\r\n  try {\r\n    console.log('Fetching URL:', url);\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch characters');\r\n    }\r\n    const data = await response.json();\r\n    console.log('Fetched Data:', data);\r\n    return data.data.results;\r\n  } catch (error) {\r\n    console.error('Error fetching characters:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// marvelService.js\r\nexport const fetchCharacterById = async (id) => {\r\n  const response = await fetch(`https://gateway.marvel.com/v1/public/characters/${id}?apikey=YOUR_API_KEY`);\r\n  const data = await response.json();\r\n  return data.data.results[0];\r\n};\r\n\r\nexport const fetchComicsByHeroId = async (id) => {\r\n  const response = await fetch(`https://gateway.marvel.com/v1/public/characters/${id}/comics?apikey=YOUR_API_KEY`);\r\n  const data = await response.json();\r\n  return data.data.results;\r\n};\r\n\r\n\r\n\r\nexport { fetchCharacters };\r\n"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,KAAK;AACrB;AACA,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,sCAAsC;AACvD,MAAMC,OAAO,GAAG,mBAAmB,CAAC,CAAC;;AAErC,OAAO,MAAMC,aAAa,GAAG,MAAOC,EAAE,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,QAAQ,eAAeG,EAAE,WAAWF,OAAO,EAAE,CAAC;IAClF,OAAOG,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAGD,MAAME,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;AACzD,MAAMC,UAAU,GAAGH,OAAO,CAACC,GAAG,CAACG,4BAA4B;AAC3D,MAAMC,OAAO,GAAG,sCAAsC;AAEtD,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EACtC,MAAMC,IAAI,GAAGvB,GAAG,CAAC,GAAGoB,SAAS,GAAGJ,UAAU,GAAGJ,SAAS,EAAE,CAAC;EACzD,MAAMY,GAAG,GAAG,GAAGN,OAAO,2BAA2BE,SAAS,WAAWR,SAAS,SAASW,IAAI,EAAE;EAE7F,IAAI;IACFZ,OAAO,CAACc,GAAG,CAAC,eAAe,EAAED,GAAG,CAAC;IACjC,MAAMlB,QAAQ,GAAG,MAAMoB,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAAClB,QAAQ,CAACqB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IACA,MAAMpB,IAAI,GAAG,MAAMF,QAAQ,CAACuB,IAAI,CAAC,CAAC;IAClClB,OAAO,CAACc,GAAG,CAAC,eAAe,EAAEjB,IAAI,CAAC;IAClC,OAAOA,IAAI,CAACA,IAAI,CAACC,OAAO;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMoB,kBAAkB,GAAG,MAAOzB,EAAE,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMoB,KAAK,CAAC,mDAAmDrB,EAAE,sBAAsB,CAAC;EACzG,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACuB,IAAI,CAAC,CAAC;EAClC,OAAOrB,IAAI,CAACA,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMsB,mBAAmB,GAAG,MAAO1B,EAAE,IAAK;EAC/C,MAAMC,QAAQ,GAAG,MAAMoB,KAAK,CAAC,mDAAmDrB,EAAE,6BAA6B,CAAC;EAChH,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACuB,IAAI,CAAC,CAAC;EAClC,OAAOrB,IAAI,CAACA,IAAI,CAACC,OAAO;AAC1B,CAAC;AAID,SAASU,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}